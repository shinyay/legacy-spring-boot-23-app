{"version":3,"sources":["services/api.js","store/actions/booksActions.js","components/BookList.js","store/actions/inventoryActions.js","components/InventoryList.js","store/actions/ordersActions.js","components/OrderList.js","components/Dashboard.js","App.js","store/reducers/booksReducer.js","store/reducers/inventoryReducer.js","store/reducers/ordersReducer.js","store/reducers/index.js","store/index.js","theme.js","index.js"],"names":["api","axios","create","baseURL","process","REACT_APP_API_URL","timeout","headers","booksApi","params","arguments","length","undefined","page","size","sortBy","sortDir","keyword","get","inventoryApi","getInventory","getInventoryAlerts","getOutOfStockItems","ordersApi","status","type","customerId","startDate","endDate","queryParams","id","post","getStatusCounts","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","removeItem","window","location","href","FETCH_BOOKS_START","FETCH_BOOKS_SUCCESS","FETCH_BOOKS_FAILURE","FETCH_BOOK_START","FETCH_BOOK_SUCCESS","FETCH_BOOK_FAILURE","CREATE_BOOK_START","CREATE_BOOK_SUCCESS","CREATE_BOOK_FAILURE","UPDATE_BOOK_START","UPDATE_BOOK_SUCCESS","UPDATE_BOOK_FAILURE","DELETE_BOOK_START","DELETE_BOOK_SUCCESS","DELETE_BOOK_FAILURE","fetchBooks","async","dispatch","payload","data","_error$response$data","message","useStyles","makeStyles","theme","root","width","paper","marginBottom","spacing","table","minWidth","searchBox","display","gap","alignItems","levelChip","titleCell","maxWidth","overflow","textOverflow","whiteSpace","loading","justifyContent","height","BookList","classes","useDispatch","books","useSelector","state","_state$books","_state$books$books","content","_state$books2","_state$books3","searchKeyword","setSearchKeyword","useState","useEffect","getLevelColor","level","getLevelLabel","React","createElement","className","CircularProgress","Box","p","Typography","color","variant","gutterBottom","onSubmit","event","preventDefault","TextField","label","value","onChange","target","placeholder","style","Button","Paper","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","map","book","key","isbn13","title","publisherName","publicationDate","Date","toLocaleDateString","listPrice","toLocaleString","Chip","FETCH_INVENTORY_START","FETCH_INVENTORY_SUCCESS","FETCH_INVENTORY_FAILURE","FETCH_INVENTORY_ALERTS_START","FETCH_INVENTORY_ALERTS_SUCCESS","FETCH_INVENTORY_ALERTS_FAILURE","RECEIVE_STOCK_START","RECEIVE_STOCK_SUCCESS","RECEIVE_STOCK_FAILURE","SELL_STOCK_START","SELL_STOCK_SUCCESS","SELL_STOCK_FAILURE","actionButtons","stockChip","InventoryList","inventoryItems","_state$inventory","inventory","items","_state$inventory2","_state$inventory3","getStockStatusColor","availableStock","lowStock","align","item","bookTitle","storeStock","warehouseStock","reservedCount","locationCode","colSpan","ORDERS_LOADING","ORDERS_SUCCESS","ORDERS_ERROR","ORDER_DETAIL_LOADING","ORDER_DETAIL_SUCCESS","ORDER_DETAIL_ERROR","ORDER_CREATE_LOADING","ORDER_CREATE_SUCCESS","ORDER_CREATE_ERROR","ORDER_UPDATE_LOADING","ORDER_UPDATE_SUCCESS","ORDER_UPDATE_ERROR","ORDER_STATUS_COUNTS_LOADING","ORDER_STATUS_COUNTS_SUCCESS","ORDER_STATUS_COUNTS_ERROR","fetchOrderStatusCounts","_error$response9","_error$response9$data","flexWrap","statusChip","orderNumberCell","fontWeight","palette","primary","main","amountCell","textAlign","statusCard","margin","statusTitle","fontSize","actionButton","statusColors","PENDING","CONFIRMED","PICKING","SHIPPED","DELIVERED","CANCELLED","statusLabels","typeLabels","WALK_IN","ONLINE","PHONE","OrderList","_selectedOrder$orderI","orders","selectedOrder","statusCounts","detailLoading","updateLoading","statusFilter","setStatusFilter","typeFilter","setTypeFilter","setPage","rowsPerPage","setRowsPerPage","detailDialogOpen","setDetailDialogOpen","loadOrders","fetchOrders","handleSearch","handleViewOrder","orderId","_error$response2","_error$response2$data","handleStatusUpdate","action","_error$response5","_error$response5$data","_error$response6","_error$response6$data","pickOrder","_error$response7","_error$response7$data","shipOrder","_error$response8","_error$response8$data","deliverOrder","console","formatCurrency","amount","Intl","NumberFormat","currency","format","formatDateTime","dateTimeString","Grid","container","Object","entries","_ref","count","xs","sm","md","Card","CardContent","toUpperCase","e","onKeyPress","FormControl","InputLabel","Select","MenuItem","_ref2","_ref3","onClick","startIcon","AddIcon","order","orderNumber","orderDate","totalAmount","actions","push","ConfirmIcon","disabled","PickIcon","ShipIcon","DeliverIcon","ViewIcon","renderStatusActions","TablePagination","rowsPerPageOptions","component","totalElements","onChangePage","handleChangePage","newPage","onChangeRowsPerPage","parseInt","labelRowsPerPage","labelDisplayedRows","_ref4","from","to","Dialog","open","onClose","fullWidth","DialogTitle","DialogContent","paymentMethod","marginLeft","notes","confirmedDate","shippedDate","deliveredDate","orderItems","bookIsbn13","quantity","unitPrice","totalPrice","DialogActions","flexGrow","padding","text","secondary","card","statCard","statIcon","statNumber","alertCard","alertIcon","warning","marginRight","Dashboard","setLoading","setError","stats","setStats","totalBooks","lowStockItems","outOfStock","pendingOrders","recentBooks","setRecentBooks","lowStockAlerts","setLowStockAlerts","booksResponse","inventoryResponse","alertsResponse","outOfStockResponse","all","reduce","sum","err","_err$response","_err$response$data","fetchDashboardData","Storage","Warning","ShoppingCart","List","ListItem","ListItemText","alert","reorderPoint","drawerWidth","appBar","drawer","flexShrink","drawerPaper","toolbar","mixins","backgroundColor","background","default","App","history","useHistory","selectedMenu","setSelectedMenu","menuItems","icon","path","Book","People","Assessment","CssBaseline","AppBar","position","Toolbar","noWrap","Drawer","anchor","button","selected","handleMenuClick","ListItemIcon","Switch","Route","exact","DashboardPage","render","initialState","selectedBook","booksReducer","filter","Math","max","alerts","inventoryReducer","bookId","totalPages","number","pending","confirmed","picking","shipped","delivered","cancelled","createLoading","statusCountsLoading","detailError","createError","updateError","statusCountsError","ordersReducer","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","createMuiTheme","typography","h6","ReactDOM","Provider","BrowserRouter","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.7c079781.chunk.js","sourcesContent":["import axios from 'axios';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Books API\nexport const booksApi = {\n  // Get all books with pagination and search\n  getBooks: (params = {}) => {\n    const { page = 0, size = 10, sortBy = 'id', sortDir = 'asc', keyword = '' } = params;\n    return api.get('/books', {\n      params: { page, size, sortBy, sortDir, keyword }\n    });\n  },\n\n  // Get book by ID\n  getBook: (id) => {\n    return api.get(`/books/${id}`);\n  },\n\n  // Get book by ISBN\n  getBookByIsbn: (isbn13) => {\n    return api.get(`/books/isbn/${isbn13}`);\n  },\n\n  // Create new book\n  createBook: (bookData) => {\n    return api.post('/books', bookData);\n  },\n\n  // Update book\n  updateBook: (id, bookData) => {\n    return api.put(`/books/${id}`, bookData);\n  },\n\n  // Delete book\n  deleteBook: (id) => {\n    return api.delete(`/books/${id}`);\n  },\n};\n\n// Inventory API\nexport const inventoryApi = {\n  // Get all inventory\n  getInventory: () => {\n    return api.get('/inventory');\n  },\n\n  // Get inventory by book ID\n  getInventoryByBook: (bookId) => {\n    return api.get(`/inventory/${bookId}`);\n  },\n\n  // Get inventory alerts\n  getInventoryAlerts: () => {\n    return api.get('/inventory/alerts');\n  },\n\n  // Get out of stock items\n  getOutOfStockItems: () => {\n    return api.get('/inventory/out-of-stock');\n  },\n\n  // Receive stock\n  receiveStock: (data) => {\n    return api.post('/inventory/receive', data);\n  },\n\n  // Sell stock\n  sellStock: (data) => {\n    return api.post('/inventory/sell', data);\n  },\n\n  // Adjust stock\n  adjustStock: (data) => {\n    return api.put('/inventory/adjust', data);\n  },\n};\n\n// Orders API\nexport const ordersApi = {\n  // Get all orders with pagination and filters\n  getOrders: (params = {}) => {\n    const { \n      page = 0, \n      size = 10, \n      sortBy = 'orderDate', \n      sortDir = 'desc', \n      status, \n      type, \n      customerId, \n      startDate, \n      endDate, \n      keyword \n    } = params;\n    \n    const queryParams = { page, size, sortBy, sortDir };\n    if (status) queryParams.status = status;\n    if (type) queryParams.type = type;\n    if (customerId) queryParams.customerId = customerId;\n    if (startDate) queryParams.startDate = startDate;\n    if (endDate) queryParams.endDate = endDate;\n    if (keyword) queryParams.keyword = keyword;\n    \n    return api.get('/orders', { params: queryParams });\n  },\n\n  // Get order by ID\n  getOrder: (id) => {\n    return api.get(`/orders/${id}`);\n  },\n\n  // Get order by order number\n  getOrderByNumber: (orderNumber) => {\n    return api.get(`/orders/number/${orderNumber}`);\n  },\n\n  // Get orders by customer ID\n  getOrdersByCustomer: (customerId) => {\n    return api.get(`/orders/customer/${customerId}`);\n  },\n\n  // Create new order\n  createOrder: (orderData) => {\n    return api.post('/orders', orderData);\n  },\n\n  // Confirm order\n  confirmOrder: (id) => {\n    return api.post(`/orders/${id}/confirm`);\n  },\n\n  // Mark order as picking\n  pickOrder: (id) => {\n    return api.post(`/orders/${id}/pick`);\n  },\n\n  // Mark order as shipped\n  shipOrder: (id) => {\n    return api.post(`/orders/${id}/ship`);\n  },\n\n  // Mark order as delivered\n  deliverOrder: (id) => {\n    return api.post(`/orders/${id}/deliver`);\n  },\n\n  // Get order status counts\n  getStatusCounts: () => {\n    return api.get('/orders/stats/status-count');\n  },\n};\n\n// Request interceptor\napi.interceptors.request.use(\n  (config) => {\n    // Add auth token if available\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    // Handle common errors\n    if (error.response?.status === 401) {\n      // Unauthorized - redirect to login\n      localStorage.removeItem('authToken');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default api;","import { booksApi } from '../../services/api';\n\n// Action Types\nexport const FETCH_BOOKS_START = 'FETCH_BOOKS_START';\nexport const FETCH_BOOKS_SUCCESS = 'FETCH_BOOKS_SUCCESS';\nexport const FETCH_BOOKS_FAILURE = 'FETCH_BOOKS_FAILURE';\n\nexport const FETCH_BOOK_START = 'FETCH_BOOK_START';\nexport const FETCH_BOOK_SUCCESS = 'FETCH_BOOK_SUCCESS';\nexport const FETCH_BOOK_FAILURE = 'FETCH_BOOK_FAILURE';\n\nexport const CREATE_BOOK_START = 'CREATE_BOOK_START';\nexport const CREATE_BOOK_SUCCESS = 'CREATE_BOOK_SUCCESS';\nexport const CREATE_BOOK_FAILURE = 'CREATE_BOOK_FAILURE';\n\nexport const UPDATE_BOOK_START = 'UPDATE_BOOK_START';\nexport const UPDATE_BOOK_SUCCESS = 'UPDATE_BOOK_SUCCESS';\nexport const UPDATE_BOOK_FAILURE = 'UPDATE_BOOK_FAILURE';\n\nexport const DELETE_BOOK_START = 'DELETE_BOOK_START';\nexport const DELETE_BOOK_SUCCESS = 'DELETE_BOOK_SUCCESS';\nexport const DELETE_BOOK_FAILURE = 'DELETE_BOOK_FAILURE';\n\n// Action Creators\nexport const fetchBooks = (params = {}) => {\n  return async (dispatch) => {\n    dispatch({ type: FETCH_BOOKS_START });\n    \n    try {\n      const response = await booksApi.getBooks(params);\n      dispatch({\n        type: FETCH_BOOKS_SUCCESS,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: FETCH_BOOKS_FAILURE,\n        payload: error.response?.data?.message || error.message\n      });\n      throw error;\n    }\n  };\n};\n\nexport const fetchBook = (id) => {\n  return async (dispatch) => {\n    dispatch({ type: FETCH_BOOK_START });\n    \n    try {\n      const response = await booksApi.getBook(id);\n      dispatch({\n        type: FETCH_BOOK_SUCCESS,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: FETCH_BOOK_FAILURE,\n        payload: error.response?.data?.message || error.message\n      });\n      throw error;\n    }\n  };\n};\n\nexport const createBook = (bookData) => {\n  return async (dispatch) => {\n    dispatch({ type: CREATE_BOOK_START });\n    \n    try {\n      const response = await booksApi.createBook(bookData);\n      dispatch({\n        type: CREATE_BOOK_SUCCESS,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: CREATE_BOOK_FAILURE,\n        payload: error.response?.data?.message || error.message\n      });\n      throw error;\n    }\n  };\n};\n\nexport const updateBook = (id, bookData) => {\n  return async (dispatch) => {\n    dispatch({ type: UPDATE_BOOK_START });\n    \n    try {\n      const response = await booksApi.updateBook(id, bookData);\n      dispatch({\n        type: UPDATE_BOOK_SUCCESS,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: UPDATE_BOOK_FAILURE,\n        payload: error.response?.data?.message || error.message\n      });\n      throw error;\n    }\n  };\n};\n\nexport const deleteBook = (id) => {\n  return async (dispatch) => {\n    dispatch({ type: DELETE_BOOK_START });\n    \n    try {\n      await booksApi.deleteBook(id);\n      dispatch({\n        type: DELETE_BOOK_SUCCESS,\n        payload: id\n      });\n      return id;\n    } catch (error) {\n      dispatch({\n        type: DELETE_BOOK_FAILURE,\n        payload: error.response?.data?.message || error.message\n      });\n      throw error;\n    }\n  };\n};","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  TextField,\n  Box,\n  Typography,\n  Chip,\n  CircularProgress,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { fetchBooks } from '../store/actions/booksActions';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  searchBox: {\n    marginBottom: theme.spacing(2),\n    display: 'flex',\n    gap: theme.spacing(2),\n    alignItems: 'center',\n  },\n  levelChip: {\n    minWidth: 60,\n  },\n  titleCell: {\n    maxWidth: 200,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  },\n  loading: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 200,\n  },\n}));\n\nfunction BookList() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  \n  // Redux state\n  const books = useSelector((state) => state.books?.books?.content || []);\n  const loading = useSelector((state) => state.books?.loading || false);\n  const error = useSelector((state) => state.books?.error);\n\n  // Local state\n  const [searchKeyword, setSearchKeyword] = useState('');\n  \n  // Constants for pagination and sorting (no UI controls)\n  const page = 0;\n  const rowsPerPage = 10;\n  const sortBy = 'id';\n  const sortDir = 'asc';\n\n  // Fetch books on component mount and when search changes\n  useEffect(() => {\n    const params = {\n      page,\n      size: rowsPerPage,\n      sortBy,\n      sortDir,\n      keyword: searchKeyword,\n    };\n    dispatch(fetchBooks(params));\n  }, [dispatch, searchKeyword]); // Removed pagination dependencies since they're constants\n\n  const handleSearchChange = (event) => {\n    setSearchKeyword(event.target.value);\n  };\n\n  const handleSearchSubmit = (event) => {\n    event.preventDefault();\n    const params = {\n      page,\n      size: rowsPerPage,\n      sortBy,\n      sortDir,\n      keyword: searchKeyword,\n    };\n    dispatch(fetchBooks(params));\n  };\n\n  const getLevelColor = (level) => {\n    switch (level) {\n      case 'BEGINNER':\n        return 'primary';\n      case 'INTERMEDIATE':\n        return 'secondary';\n      case 'ADVANCED':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n\n  const getLevelLabel = (level) => {\n    switch (level) {\n      case 'BEGINNER':\n        return '初級';\n      case 'INTERMEDIATE':\n        return '中級';\n      case 'ADVANCED':\n        return '上級';\n      default:\n        return level;\n    }\n  };\n\n  if (loading && books.length === 0) {\n    return (\n      <div className={classes.loading}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box p={2}>\n        <Typography color=\"error\">\n          エラーが発生しました: {error}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" gutterBottom>\n        書籍一覧\n      </Typography>\n      \n      {/* Search */}\n      <form onSubmit={handleSearchSubmit}>\n        <Box className={classes.searchBox}>\n          <TextField\n            label=\"検索キーワード\"\n            variant=\"outlined\"\n            value={searchKeyword}\n            onChange={handleSearchChange}\n            placeholder=\"タイトル、ISBN、著者名で検索\"\n            style={{ minWidth: 300 }}\n          />\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            検索\n          </Button>\n        </Box>\n      </form>\n\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell>ID</TableCell>\n                <TableCell>ISBN-13</TableCell>\n                <TableCell>タイトル</TableCell>\n                <TableCell>出版社</TableCell>\n                <TableCell>発行日</TableCell>\n                <TableCell>定価</TableCell>\n                <TableCell>レベル</TableCell>\n                <TableCell>アクション</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {books.map((book) => (\n                <TableRow key={book.id}>\n                  <TableCell>{book.id}</TableCell>\n                  <TableCell>{book.isbn13}</TableCell>\n                  <TableCell className={classes.titleCell}>\n                    <Typography variant=\"body2\" title={book.title}>\n                      {book.title}\n                    </Typography>\n                  </TableCell>\n                  <TableCell>{book.publisherName}</TableCell>\n                  <TableCell>\n                    {book.publicationDate ? new Date(book.publicationDate).toLocaleDateString('ja-JP') : '-'}\n                  </TableCell>\n                  <TableCell>\n                    {book.listPrice ? `¥${book.listPrice.toLocaleString()}` : '-'}\n                  </TableCell>\n                  <TableCell>\n                    {book.level && (\n                      <Chip\n                        label={getLevelLabel(book.level)}\n                        color={getLevelColor(book.level)}\n                        size=\"small\"\n                        className={classes.levelChip}\n                      />\n                    )}\n                  </TableCell>\n                  <TableCell>\n                    <Button\n                      variant=\"outlined\"\n                      size=\"small\"\n                      color=\"primary\"\n                    >\n                      詳細\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n    </div>\n  );\n}\n\nexport default BookList;","import { inventoryApi } from '../../services/api';\n\n// Action Types\nexport const FETCH_INVENTORY_START = 'FETCH_INVENTORY_START';\nexport const FETCH_INVENTORY_SUCCESS = 'FETCH_INVENTORY_SUCCESS';\nexport const FETCH_INVENTORY_FAILURE = 'FETCH_INVENTORY_FAILURE';\n\nexport const FETCH_INVENTORY_ALERTS_START = 'FETCH_INVENTORY_ALERTS_START';\nexport const FETCH_INVENTORY_ALERTS_SUCCESS = 'FETCH_INVENTORY_ALERTS_SUCCESS';\nexport const FETCH_INVENTORY_ALERTS_FAILURE = 'FETCH_INVENTORY_ALERTS_FAILURE';\n\nexport const RECEIVE_STOCK_START = 'RECEIVE_STOCK_START';\nexport const RECEIVE_STOCK_SUCCESS = 'RECEIVE_STOCK_SUCCESS';\nexport const RECEIVE_STOCK_FAILURE = 'RECEIVE_STOCK_FAILURE';\n\nexport const SELL_STOCK_START = 'SELL_STOCK_START';\nexport const SELL_STOCK_SUCCESS = 'SELL_STOCK_SUCCESS';\nexport const SELL_STOCK_FAILURE = 'SELL_STOCK_FAILURE';\n\n// Action Creators\nexport const fetchInventory = () => {\n  return async (dispatch) => {\n    dispatch({ type: FETCH_INVENTORY_START });\n    \n    try {\n      const response = await inventoryApi.getInventory();\n      dispatch({\n        type: FETCH_INVENTORY_SUCCESS,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: FETCH_INVENTORY_FAILURE,\n        payload: error.response?.data?.message || error.message\n      });\n      throw error;\n    }\n  };\n};\n\nexport const fetchInventoryAlerts = () => {\n  return async (dispatch) => {\n    dispatch({ type: FETCH_INVENTORY_ALERTS_START });\n    \n    try {\n      const response = await inventoryApi.getInventoryAlerts();\n      dispatch({\n        type: FETCH_INVENTORY_ALERTS_SUCCESS,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: FETCH_INVENTORY_ALERTS_FAILURE,\n        payload: error.response?.data?.message || error.message\n      });\n      throw error;\n    }\n  };\n};\n\nexport const receiveStock = (stockData) => {\n  return async (dispatch) => {\n    dispatch({ type: RECEIVE_STOCK_START });\n    \n    try {\n      const response = await inventoryApi.receiveStock(stockData);\n      dispatch({\n        type: RECEIVE_STOCK_SUCCESS,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: RECEIVE_STOCK_FAILURE,\n        payload: error.response?.data?.message || error.message\n      });\n      throw error;\n    }\n  };\n};\n\nexport const sellStock = (stockData) => {\n  return async (dispatch) => {\n    dispatch({ type: SELL_STOCK_START });\n    \n    try {\n      const response = await inventoryApi.sellStock(stockData);\n      dispatch({\n        type: SELL_STOCK_SUCCESS,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: SELL_STOCK_FAILURE,\n        payload: error.response?.data?.message || error.message\n      });\n      throw error;\n    }\n  };\n};","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Typography,\n  Chip,\n  Box,\n  Button,\n  CircularProgress,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { fetchInventory } from '../store/actions/inventoryActions';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  actionButtons: {\n    display: 'flex',\n    gap: theme.spacing(1),\n  },\n  stockChip: {\n    minWidth: 60,\n  },\n  titleCell: {\n    maxWidth: 200,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  },\n  loading: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 200,\n  },\n}));\n\nfunction InventoryList() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  \n  // Redux state - using real API calls instead of mock data\n  const inventoryItems = useSelector((state) => state.inventory?.items || []);\n  const loading = useSelector((state) => state.inventory?.loading || false);\n  const error = useSelector((state) => state.inventory?.error);\n\n  useEffect(() => {\n    dispatch(fetchInventory());\n  }, [dispatch]);\n\n  const getStockStatusColor = (availableStock, lowStock) => {\n    if (availableStock <= 0) {\n      return 'secondary'; // Red for out of stock\n    } else if (lowStock) {\n      return 'primary'; // Orange for low stock\n    } else {\n      return 'default'; // Green for normal stock\n    }\n  };\n\n  const getStockStatusLabel = (availableStock, lowStock) => {\n    if (availableStock <= 0) {\n      return '在庫切れ';\n    } else if (lowStock) {\n      return '在庫少';\n    } else {\n      return '在庫有';\n    }\n  };\n\n  const formatLocation = (locationCode) => {\n    return locationCode || '-';\n  };\n\n  if (loading) {\n    return (\n      <div className={classes.loading}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box p={2}>\n        <Typography color=\"error\">\n          エラーが発生しました: {error}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" gutterBottom>\n        在庫一覧\n      </Typography>\n\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell>書籍タイトル</TableCell>\n                <TableCell>ISBN-13</TableCell>\n                <TableCell align=\"right\">店頭在庫</TableCell>\n                <TableCell align=\"right\">倉庫在庫</TableCell>\n                <TableCell align=\"right\">予約数</TableCell>\n                <TableCell align=\"right\">利用可能在庫</TableCell>\n                <TableCell>在庫状況</TableCell>\n                <TableCell>棚番号</TableCell>\n                <TableCell>アクション</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {inventoryItems.map((item) => (\n                <TableRow key={item.id}>\n                  <TableCell className={classes.titleCell}>\n                    <Typography variant=\"body2\" title={item.bookTitle}>\n                      {item.bookTitle}\n                    </Typography>\n                  </TableCell>\n                  <TableCell>{item.isbn13}</TableCell>\n                  <TableCell align=\"right\">{item.storeStock}</TableCell>\n                  <TableCell align=\"right\">{item.warehouseStock}</TableCell>\n                  <TableCell align=\"right\">{item.reservedCount}</TableCell>\n                  <TableCell align=\"right\">\n                    <Typography\n                      variant=\"body2\"\n                      color={item.availableStock <= 0 ? \"error\" : \"textPrimary\"}\n                    >\n                      {item.availableStock}\n                    </Typography>\n                  </TableCell>\n                  <TableCell>\n                    <Chip\n                      label={getStockStatusLabel(item.availableStock, item.lowStock)}\n                      color={getStockStatusColor(item.availableStock, item.lowStock)}\n                      size=\"small\"\n                      className={classes.stockChip}\n                    />\n                  </TableCell>\n                  <TableCell>{formatLocation(item.locationCode)}</TableCell>\n                  <TableCell>\n                    <div className={classes.actionButtons}>\n                      <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        color=\"primary\"\n                      >\n                        入荷\n                      </Button>\n                      <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        color=\"secondary\"\n                      >\n                        販売\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n              {inventoryItems.length === 0 && (\n                <TableRow>\n                  <TableCell colSpan={9} align=\"center\">\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      在庫データがありません\n                    </Typography>\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Paper>\n    </div>\n  );\n}\n\nexport default InventoryList;","import { ordersApi } from '../../services/api';\n\n// Action types\nexport const ORDERS_LOADING = 'ORDERS_LOADING';\nexport const ORDERS_SUCCESS = 'ORDERS_SUCCESS';\nexport const ORDERS_ERROR = 'ORDERS_ERROR';\nexport const ORDER_DETAIL_LOADING = 'ORDER_DETAIL_LOADING';\nexport const ORDER_DETAIL_SUCCESS = 'ORDER_DETAIL_SUCCESS';\nexport const ORDER_DETAIL_ERROR = 'ORDER_DETAIL_ERROR';\nexport const ORDER_CREATE_LOADING = 'ORDER_CREATE_LOADING';\nexport const ORDER_CREATE_SUCCESS = 'ORDER_CREATE_SUCCESS';\nexport const ORDER_CREATE_ERROR = 'ORDER_CREATE_ERROR';\nexport const ORDER_UPDATE_LOADING = 'ORDER_UPDATE_LOADING';\nexport const ORDER_UPDATE_SUCCESS = 'ORDER_UPDATE_SUCCESS';\nexport const ORDER_UPDATE_ERROR = 'ORDER_UPDATE_ERROR';\nexport const ORDER_STATUS_COUNTS_LOADING = 'ORDER_STATUS_COUNTS_LOADING';\nexport const ORDER_STATUS_COUNTS_SUCCESS = 'ORDER_STATUS_COUNTS_SUCCESS';\nexport const ORDER_STATUS_COUNTS_ERROR = 'ORDER_STATUS_COUNTS_ERROR';\n\n// Action creators\nexport const fetchOrders = (params = {}) => {\n  return async (dispatch) => {\n    dispatch({ type: ORDERS_LOADING });\n    try {\n      const response = await ordersApi.getOrders(params);\n      dispatch({\n        type: ORDERS_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: ORDERS_ERROR,\n        payload: error.response?.data?.message || 'Failed to fetch orders'\n      });\n    }\n  };\n};\n\nexport const fetchOrderById = (id) => {\n  return async (dispatch) => {\n    dispatch({ type: ORDER_DETAIL_LOADING });\n    try {\n      const response = await ordersApi.getOrder(id);\n      dispatch({\n        type: ORDER_DETAIL_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: ORDER_DETAIL_ERROR,\n        payload: error.response?.data?.message || 'Failed to fetch order details'\n      });\n    }\n  };\n};\n\nexport const fetchOrderByNumber = (orderNumber) => {\n  return async (dispatch) => {\n    dispatch({ type: ORDER_DETAIL_LOADING });\n    try {\n      const response = await ordersApi.getOrderByNumber(orderNumber);\n      dispatch({\n        type: ORDER_DETAIL_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: ORDER_DETAIL_ERROR,\n        payload: error.response?.data?.message || 'Failed to fetch order details'\n      });\n    }\n  };\n};\n\nexport const createOrder = (orderData) => {\n  return async (dispatch) => {\n    dispatch({ type: ORDER_CREATE_LOADING });\n    try {\n      const response = await ordersApi.createOrder(orderData);\n      dispatch({\n        type: ORDER_CREATE_SUCCESS,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: ORDER_CREATE_ERROR,\n        payload: error.response?.data?.message || 'Failed to create order'\n      });\n      throw error;\n    }\n  };\n};\n\nexport const confirmOrder = (id) => {\n  return async (dispatch) => {\n    dispatch({ type: ORDER_UPDATE_LOADING });\n    try {\n      const response = await ordersApi.confirmOrder(id);\n      dispatch({\n        type: ORDER_UPDATE_SUCCESS,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: ORDER_UPDATE_ERROR,\n        payload: error.response?.data?.message || 'Failed to confirm order'\n      });\n      throw error;\n    }\n  };\n};\n\nexport const pickOrder = (id) => {\n  return async (dispatch) => {\n    dispatch({ type: ORDER_UPDATE_LOADING });\n    try {\n      const response = await ordersApi.pickOrder(id);\n      dispatch({\n        type: ORDER_UPDATE_SUCCESS,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: ORDER_UPDATE_ERROR,\n        payload: error.response?.data?.message || 'Failed to pick order'\n      });\n      throw error;\n    }\n  };\n};\n\nexport const shipOrder = (id) => {\n  return async (dispatch) => {\n    dispatch({ type: ORDER_UPDATE_LOADING });\n    try {\n      const response = await ordersApi.shipOrder(id);\n      dispatch({\n        type: ORDER_UPDATE_SUCCESS,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: ORDER_UPDATE_ERROR,\n        payload: error.response?.data?.message || 'Failed to ship order'\n      });\n      throw error;\n    }\n  };\n};\n\nexport const deliverOrder = (id) => {\n  return async (dispatch) => {\n    dispatch({ type: ORDER_UPDATE_LOADING });\n    try {\n      const response = await ordersApi.deliverOrder(id);\n      dispatch({\n        type: ORDER_UPDATE_SUCCESS,\n        payload: response.data\n      });\n      return response.data;\n    } catch (error) {\n      dispatch({\n        type: ORDER_UPDATE_ERROR,\n        payload: error.response?.data?.message || 'Failed to deliver order'\n      });\n      throw error;\n    }\n  };\n};\n\nexport const fetchOrderStatusCounts = () => {\n  return async (dispatch) => {\n    dispatch({ type: ORDER_STATUS_COUNTS_LOADING });\n    try {\n      const response = await ordersApi.getStatusCounts();\n      dispatch({\n        type: ORDER_STATUS_COUNTS_SUCCESS,\n        payload: response.data\n      });\n    } catch (error) {\n      dispatch({\n        type: ORDER_STATUS_COUNTS_ERROR,\n        payload: error.response?.data?.message || 'Failed to fetch order status counts'\n      });\n    }\n  };\n};","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Button,\n  TextField,\n  Box,\n  Typography,\n  Chip,\n  CircularProgress,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TablePagination,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  Grid,\n  Card,\n  CardContent,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { \n  Add as AddIcon,\n  Visibility as ViewIcon,\n  CheckCircle as ConfirmIcon,\n  LocalShipping as ShipIcon,\n  Assignment as PickIcon,\n  DoneAll as DeliverIcon,\n} from '@material-ui/icons';\nimport { \n  fetchOrders, \n  fetchOrderById,\n  confirmOrder,\n  pickOrder,\n  shipOrder,\n  deliverOrder,\n  fetchOrderStatusCounts \n} from '../store/actions/ordersActions';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  searchBox: {\n    marginBottom: theme.spacing(2),\n    display: 'flex',\n    gap: theme.spacing(2),\n    alignItems: 'center',\n    flexWrap: 'wrap',\n  },\n  statusChip: {\n    minWidth: 80,\n  },\n  orderNumberCell: {\n    fontWeight: 'bold',\n    color: theme.palette.primary.main,\n  },\n  amountCell: {\n    fontWeight: 'bold',\n    textAlign: 'right',\n  },\n  loading: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 400,\n  },\n  statusCard: {\n    margin: theme.spacing(1),\n    textAlign: 'center',\n  },\n  statusTitle: {\n    fontSize: '2rem',\n    fontWeight: 'bold',\n    color: theme.palette.primary.main,\n  },\n  actionButton: {\n    margin: theme.spacing(0.5),\n  },\n}));\n\nconst statusColors = {\n  PENDING: 'default',\n  CONFIRMED: 'primary',\n  PICKING: 'secondary',\n  SHIPPED: 'info',\n  DELIVERED: 'success',\n  CANCELLED: 'error',\n};\n\nconst statusLabels = {\n  PENDING: '保留中',\n  CONFIRMED: '確認済み',\n  PICKING: '梱包中',\n  SHIPPED: '出荷済み',\n  DELIVERED: '配達完了',\n  CANCELLED: 'キャンセル',\n};\n\nconst typeLabels = {\n  WALK_IN: '店頭販売',\n  ONLINE: 'オンライン',\n  PHONE: '電話注文',\n};\n\nfunction OrderList() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const { \n    orders, \n    selectedOrder,\n    statusCounts,\n    loading, \n    detailLoading,\n    updateLoading,\n  } = useSelector(state => state.orders);\n\n  const [searchKeyword, setSearchKeyword] = useState('');\n  const [statusFilter, setStatusFilter] = useState('');\n  const [typeFilter, setTypeFilter] = useState('');\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [sortBy] = useState('orderDate');\n  const [sortDir] = useState('desc');\n  const [detailDialogOpen, setDetailDialogOpen] = useState(false);\n\n  useEffect(() => {\n    loadOrders();\n    dispatch(fetchOrderStatusCounts());\n  }, [dispatch, page, rowsPerPage, sortBy, sortDir, statusFilter, typeFilter]);\n\n  const loadOrders = () => {\n    const params = {\n      page,\n      size: rowsPerPage,\n      sortBy,\n      sortDir,\n      keyword: searchKeyword,\n    };\n    \n    if (statusFilter) params.status = statusFilter;\n    if (typeFilter) params.type = typeFilter;\n    \n    dispatch(fetchOrders(params));\n  };\n\n  const handleSearch = () => {\n    setPage(0);\n    loadOrders();\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleViewOrder = (orderId) => {\n    dispatch(fetchOrderById(orderId));\n    setDetailDialogOpen(true);\n  };\n\n  const handleStatusUpdate = async (orderId, action) => {\n    try {\n      switch (action) {\n        case 'confirm':\n          await dispatch(confirmOrder(orderId));\n          break;\n        case 'pick':\n          await dispatch(pickOrder(orderId));\n          break;\n        case 'ship':\n          await dispatch(shipOrder(orderId));\n          break;\n        case 'deliver':\n          await dispatch(deliverOrder(orderId));\n          break;\n      }\n      loadOrders();\n      dispatch(fetchOrderStatusCounts());\n    } catch (error) {\n      console.error('Failed to update order status:', error);\n    }\n  };\n\n  const renderStatusActions = (order) => {\n    const actions = [];\n    \n    switch (order.status) {\n      case 'PENDING':\n        actions.push(\n          <Button\n            key=\"confirm\"\n            size=\"small\"\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<ConfirmIcon />}\n            className={classes.actionButton}\n            onClick={() => handleStatusUpdate(order.id, 'confirm')}\n            disabled={updateLoading}\n          >\n            確認\n          </Button>\n        );\n        break;\n      case 'CONFIRMED':\n        actions.push(\n          <Button\n            key=\"pick\"\n            size=\"small\"\n            variant=\"contained\"\n            color=\"secondary\"\n            startIcon={<PickIcon />}\n            className={classes.actionButton}\n            onClick={() => handleStatusUpdate(order.id, 'pick')}\n            disabled={updateLoading}\n          >\n            梱包\n          </Button>\n        );\n        break;\n      case 'PICKING':\n        actions.push(\n          <Button\n            key=\"ship\"\n            size=\"small\"\n            variant=\"contained\"\n            startIcon={<ShipIcon />}\n            className={classes.actionButton}\n            onClick={() => handleStatusUpdate(order.id, 'ship')}\n            disabled={updateLoading}\n          >\n            出荷\n          </Button>\n        );\n        break;\n      case 'SHIPPED':\n        actions.push(\n          <Button\n            key=\"deliver\"\n            size=\"small\"\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<DeliverIcon />}\n            className={classes.actionButton}\n            onClick={() => handleStatusUpdate(order.id, 'deliver')}\n            disabled={updateLoading}\n          >\n            配達完了\n          </Button>\n        );\n        break;\n    }\n\n    actions.push(\n      <Button\n        key=\"view\"\n        size=\"small\"\n        variant=\"outlined\"\n        startIcon={<ViewIcon />}\n        className={classes.actionButton}\n        onClick={() => handleViewOrder(order.id)}\n      >\n        詳細\n      </Button>\n    );\n\n    return actions;\n  };\n\n  const formatCurrency = (amount) => {\n    return new Intl.NumberFormat('ja-JP', {\n      style: 'currency',\n      currency: 'JPY',\n    }).format(amount);\n  };\n\n  const formatDateTime = (dateTimeString) => {\n    return new Date(dateTimeString).toLocaleString('ja-JP');\n  };\n\n  if (loading) {\n    return (\n      <div className={classes.loading}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" gutterBottom>\n        注文管理\n      </Typography>\n\n      {/* Status Summary Cards */}\n      <Grid container spacing={2} style={{ marginBottom: 16 }}>\n        {Object.entries(statusCounts).map(([status, count]) => (\n          <Grid item xs={12} sm={6} md={2} key={status}>\n            <Card className={classes.statusCard}>\n              <CardContent>\n                <Typography variant=\"h6\">\n                  {statusLabels[status.toUpperCase()] || status}\n                </Typography>\n                <Typography className={classes.statusTitle}>\n                  {count}\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n\n      {/* Search and Filters */}\n      <Box className={classes.searchBox}>\n        <TextField\n          label=\"検索（注文番号、顧客ID）\"\n          variant=\"outlined\"\n          size=\"small\"\n          value={searchKeyword}\n          onChange={(e) => setSearchKeyword(e.target.value)}\n          onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n          style={{ minWidth: 200 }}\n        />\n        \n        <FormControl variant=\"outlined\" size=\"small\" style={{ minWidth: 120 }}>\n          <InputLabel>ステータス</InputLabel>\n          <Select\n            value={statusFilter}\n            onChange={(e) => setStatusFilter(e.target.value)}\n            label=\"ステータス\"\n          >\n            <MenuItem value=\"\">すべて</MenuItem>\n            {Object.entries(statusLabels).map(([value, label]) => (\n              <MenuItem key={value} value={value}>{label}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n\n        <FormControl variant=\"outlined\" size=\"small\" style={{ minWidth: 120 }}>\n          <InputLabel>注文タイプ</InputLabel>\n          <Select\n            value={typeFilter}\n            onChange={(e) => setTypeFilter(e.target.value)}\n            label=\"注文タイプ\"\n          >\n            <MenuItem value=\"\">すべて</MenuItem>\n            {Object.entries(typeLabels).map(([value, label]) => (\n              <MenuItem key={value} value={value}>{label}</MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleSearch}\n        >\n          検索\n        </Button>\n\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          startIcon={<AddIcon />}\n          onClick={() => {/* Navigate to order form */}}\n        >\n          新規注文\n        </Button>\n      </Box>\n\n      {/* Orders Table */}\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table className={classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell>注文番号</TableCell>\n                <TableCell>注文日時</TableCell>\n                <TableCell>顧客ID</TableCell>\n                <TableCell>タイプ</TableCell>\n                <TableCell>ステータス</TableCell>\n                <TableCell align=\"right\">金額</TableCell>\n                <TableCell>アクション</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {orders.content.map((order) => (\n                <TableRow key={order.id}>\n                  <TableCell className={classes.orderNumberCell}>\n                    {order.orderNumber}\n                  </TableCell>\n                  <TableCell>\n                    {formatDateTime(order.orderDate)}\n                  </TableCell>\n                  <TableCell>\n                    {order.customerId || '-'}\n                  </TableCell>\n                  <TableCell>\n                    {typeLabels[order.type] || order.type}\n                  </TableCell>\n                  <TableCell>\n                    <Chip\n                      label={statusLabels[order.status] || order.status}\n                      color={statusColors[order.status] || 'default'}\n                      size=\"small\"\n                      className={classes.statusChip}\n                    />\n                  </TableCell>\n                  <TableCell className={classes.amountCell}>\n                    {formatCurrency(order.totalAmount)}\n                  </TableCell>\n                  <TableCell>\n                    {renderStatusActions(order)}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={orders.totalElements}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n          labelRowsPerPage=\"ページあたりの行数:\"\n          labelDisplayedRows={({ from, to, count }) => \n            `${from}-${to} / ${count !== -1 ? count : `more than ${to}`}`\n          }\n        />\n      </Paper>\n\n      {/* Order Detail Dialog */}\n      <Dialog\n        open={detailDialogOpen}\n        onClose={() => setDetailDialogOpen(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>注文詳細</DialogTitle>\n        <DialogContent>\n          {detailLoading ? (\n            <CircularProgress />\n          ) : selectedOrder ? (\n            <Grid container spacing={2}>\n              <Grid item xs={12} sm={6}>\n                <Typography variant=\"h6\">基本情報</Typography>\n                <Typography>注文番号: {selectedOrder.orderNumber}</Typography>\n                <Typography>注文日時: {formatDateTime(selectedOrder.orderDate)}</Typography>\n                <Typography>顧客ID: {selectedOrder.customerId || '-'}</Typography>\n                <Typography>注文タイプ: {typeLabels[selectedOrder.type]}</Typography>\n                <Typography>支払い方法: {selectedOrder.paymentMethod}</Typography>\n                <Typography>\n                  ステータス: \n                  <Chip\n                    label={statusLabels[selectedOrder.status]}\n                    color={statusColors[selectedOrder.status]}\n                    size=\"small\"\n                    style={{ marginLeft: 8 }}\n                  />\n                </Typography>\n                <Typography>合計金額: {formatCurrency(selectedOrder.totalAmount)}</Typography>\n                {selectedOrder.notes && (\n                  <Typography>備考: {selectedOrder.notes}</Typography>\n                )}\n              </Grid>\n              <Grid item xs={12} sm={6}>\n                <Typography variant=\"h6\">進捗情報</Typography>\n                {selectedOrder.confirmedDate && (\n                  <Typography>確認日時: {formatDateTime(selectedOrder.confirmedDate)}</Typography>\n                )}\n                {selectedOrder.shippedDate && (\n                  <Typography>出荷日時: {formatDateTime(selectedOrder.shippedDate)}</Typography>\n                )}\n                {selectedOrder.deliveredDate && (\n                  <Typography>配達日時: {formatDateTime(selectedOrder.deliveredDate)}</Typography>\n                )}\n              </Grid>\n              <Grid item xs={12}>\n                <Typography variant=\"h6\">注文商品</Typography>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>書籍名</TableCell>\n                      <TableCell>ISBN</TableCell>\n                      <TableCell align=\"right\">数量</TableCell>\n                      <TableCell align=\"right\">単価</TableCell>\n                      <TableCell align=\"right\">小計</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {selectedOrder.orderItems?.map((item) => (\n                      <TableRow key={item.id}>\n                        <TableCell>{item.bookTitle}</TableCell>\n                        <TableCell>{item.bookIsbn13}</TableCell>\n                        <TableCell align=\"right\">{item.quantity}</TableCell>\n                        <TableCell align=\"right\">{formatCurrency(item.unitPrice)}</TableCell>\n                        <TableCell align=\"right\">{formatCurrency(item.totalPrice)}</TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </Grid>\n            </Grid>\n          ) : null}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDetailDialogOpen(false)} color=\"primary\">\n            閉じる\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default OrderList;","import React, { useEffect, useState } from 'react';\nimport {\n  Grid,\n  Typography,\n  Box,\n  Card,\n  CardContent,\n  List,\n  ListItem,\n  ListItemText,\n  Chip,\n  CircularProgress,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Warning, Storage, ShoppingCart } from '@material-ui/icons';\nimport { inventoryApi, booksApi } from '../services/api';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n  card: {\n    height: '100%',\n  },\n  statCard: {\n    padding: theme.spacing(2),\n    display: 'flex',\n    alignItems: 'center',\n    gap: theme.spacing(2),\n  },\n  statIcon: {\n    fontSize: 40,\n    color: theme.palette.primary.main,\n  },\n  statNumber: {\n    fontSize: '2rem',\n    fontWeight: 'bold',\n    color: theme.palette.text.primary,\n  },\n  alertCard: {\n    padding: theme.spacing(2),\n  },\n  alertIcon: {\n    color: theme.palette.warning.main,\n    marginRight: theme.spacing(1),\n  },\n  loading: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: 200,\n  },\n}));\n\nfunction Dashboard() {\n  const classes = useStyles();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [stats, setStats] = useState({\n    totalBooks: 0,\n    lowStockItems: 0,\n    outOfStock: 0,\n    pendingOrders: 0,\n  });\n  const [recentBooks, setRecentBooks] = useState([]);\n  const [lowStockAlerts, setLowStockAlerts] = useState([]);\n\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch all data in parallel\n        const [booksResponse, inventoryResponse, alertsResponse, outOfStockResponse] = await Promise.all([\n          booksApi.getBooks({ page: 0, size: 5, sortBy: 'id', sortDir: 'desc' }),\n          inventoryApi.getInventory(),\n          inventoryApi.getInventoryAlerts(),\n          inventoryApi.getOutOfStockItems(),\n        ]);\n\n        // Calculate statistics\n        const inventory = inventoryResponse.data;\n        const totalBooks = inventory.length;\n        const lowStockItems = alertsResponse.data.length;\n        const outOfStock = outOfStockResponse.data.length;\n        const pendingOrders = inventory.reduce((sum, item) => sum + (item.reservedCount || 0), 0);\n\n        setStats({\n          totalBooks,\n          lowStockItems,\n          outOfStock,\n          pendingOrders,\n        });\n\n        setRecentBooks(booksResponse.data.content || booksResponse.data || []);\n        setLowStockAlerts(alertsResponse.data || []);\n      } catch (err) {\n        console.error('Error fetching dashboard data:', err);\n        setError(err.response?.data?.message || err.message || 'データの取得に失敗しました');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchDashboardData();\n  }, []);\n\n  const getLevelLabel = (level) => {\n    switch (level) {\n      case 'BEGINNER':\n        return '初級';\n      case 'INTERMEDIATE':\n        return '中級';\n      case 'ADVANCED':\n        return '上級';\n      default:\n        return '-';\n    }\n  };\n\n  const getLevelColor = (level) => {\n    switch (level) {\n      case 'BEGINNER':\n        return 'primary';\n      case 'INTERMEDIATE':\n        return 'secondary';\n      case 'ADVANCED':\n        return 'default';\n      default:\n        return 'default';\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className={classes.loading}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box p={2}>\n        <Typography color=\"error\">\n          エラーが発生しました: {error}\n        </Typography>\n      </Box>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" gutterBottom>\n        ダッシュボード\n      </Typography>\n\n      <Grid container spacing={3}>\n        {/* Statistics Cards */}\n        <Grid item xs={12} sm={6} md={3}>\n          <Card className={classes.card}>\n            <CardContent className={classes.statCard}>\n              <Storage className={classes.statIcon} />\n              <Box>\n                <Typography className={classes.statNumber}>\n                  {stats?.totalBooks || 0}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  総書籍数\n                </Typography>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card className={classes.card}>\n            <CardContent className={classes.statCard}>\n              <Warning className={classes.statIcon} style={{ color: '#ff9800' }} />\n              <Box>\n                <Typography className={classes.statNumber}>\n                  {stats?.lowStockItems || 0}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  在庫不足\n                </Typography>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card className={classes.card}>\n            <CardContent className={classes.statCard}>\n              <Warning className={classes.statIcon} style={{ color: '#f44336' }} />\n              <Box>\n                <Typography className={classes.statNumber}>\n                  {stats?.outOfStock || 0}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  在庫切れ\n                </Typography>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} sm={6} md={3}>\n          <Card className={classes.card}>\n            <CardContent className={classes.statCard}>\n              <ShoppingCart className={classes.statIcon} />\n              <Box>\n                <Typography className={classes.statNumber}>\n                  {stats?.pendingOrders || 0}\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\">\n                  予約待ち\n                </Typography>\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Recent Books */}\n        <Grid item xs={12} md={6}>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                最近追加された書籍\n              </Typography>\n              <List>\n                {recentBooks.map((book) => (\n                  <ListItem key={book.id}>\n                    <ListItemText\n                      primary={book.title}\n                      secondary={`ISBN: ${book.isbn13}`}\n                    />\n                    <Chip\n                      label={getLevelLabel(book.level)}\n                      color={getLevelColor(book.level)}\n                      size=\"small\"\n                    />\n                  </ListItem>\n                ))}\n                {recentBooks.length === 0 && (\n                  <ListItem>\n                    <ListItemText \n                      primary=\"データがありません\"\n                      secondary=\"最近追加された書籍はありません\"\n                    />\n                  </ListItem>\n                )}\n              </List>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Inventory Alerts */}\n        <Grid item xs={12} md={6}>\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography variant=\"h6\" gutterBottom>\n                在庫アラート\n              </Typography>\n              <List>\n                {lowStockAlerts.map((alert) => (\n                  <ListItem key={alert.id}>\n                    <Warning className={classes.alertIcon} />\n                    <ListItemText\n                      primary={alert.bookTitle}\n                      secondary={`在庫数: ${alert.availableStock} / 発注点: ${alert.reorderPoint || '-'}`}\n                    />\n                  </ListItem>\n                ))}\n                {lowStockAlerts.length === 0 && (\n                  <ListItem>\n                    <ListItemText \n                      primary=\"アラートなし\"\n                      secondary=\"現在、在庫アラートはありません\"\n                    />\n                  </ListItem>\n                )}\n              </List>\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default Dashboard;","import React, { useState } from 'react';\nimport { Switch, Route, useHistory } from 'react-router-dom';\nimport { AppBar, Toolbar, Typography, Drawer, List, ListItem, ListItemIcon, ListItemText, Box, CssBaseline } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Dashboard, Book, Storage, ShoppingCart, People, Assessment } from '@material-ui/icons';\nimport BookList from './components/BookList';\nimport InventoryList from './components/InventoryList';\nimport OrderList from './components/OrderList';\nimport DashboardPage from './components/Dashboard';\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  toolbar: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.default,\n    padding: theme.spacing(3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const history = useHistory();\n  const [selectedMenu, setSelectedMenu] = useState('dashboard');\n\n  const menuItems = [\n    { id: 'dashboard', label: 'ダッシュボード', icon: <Dashboard />, path: '/' },\n    { id: 'books', label: '書籍管理', icon: <Book />, path: '/books' },\n    { id: 'inventory', label: '在庫管理', icon: <Storage />, path: '/inventory' },\n    { id: 'orders', label: '注文管理', icon: <ShoppingCart />, path: '/orders' },\n    { id: 'customers', label: '顧客管理', icon: <People />, path: '/customers' },\n    { id: 'reports', label: 'レポート', icon: <Assessment />, path: '/reports' },\n  ];\n\n  const handleMenuClick = (item) => {\n    setSelectedMenu(item.id);\n    history.push(item.path);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" noWrap>\n            TechBookStore - 技術専門書店在庫管理システム\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor=\"left\"\n      >\n        <div className={classes.toolbar} />\n        <List>\n          {menuItems.map((item) => (\n            <ListItem\n              button\n              key={item.id}\n              selected={selectedMenu === item.id}\n              onClick={() => handleMenuClick(item)}\n            >\n              <ListItemIcon>{item.icon}</ListItemIcon>\n              <ListItemText primary={item.label} />\n            </ListItem>\n          ))}\n        </List>\n      </Drawer>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Box>\n          <Switch>\n            <Route exact path=\"/\" component={DashboardPage} />\n            <Route path=\"/books\" component={BookList} />\n            <Route path=\"/inventory\" component={InventoryList} />\n            <Route path=\"/orders\" component={OrderList} />\n            <Route path=\"/customers\" render={() => <div>顧客管理ページ（開発中）</div>} />\n            <Route path=\"/reports\" render={() => <div>レポートページ（開発中）</div>} />\n          </Switch>\n        </Box>\n      </main>\n    </div>\n  );\n}\n\nexport default App;","import {\n  FETCH_BOOKS_START,\n  FETCH_BOOKS_SUCCESS,\n  FETCH_BOOKS_FAILURE,\n  FETCH_BOOK_START,\n  FETCH_BOOK_SUCCESS,\n  FETCH_BOOK_FAILURE,\n  CREATE_BOOK_START,\n  CREATE_BOOK_SUCCESS,\n  CREATE_BOOK_FAILURE,\n  UPDATE_BOOK_START,\n  UPDATE_BOOK_SUCCESS,\n  UPDATE_BOOK_FAILURE,\n  DELETE_BOOK_START,\n  DELETE_BOOK_SUCCESS,\n  DELETE_BOOK_FAILURE,\n} from '../actions/booksActions';\n\nconst initialState = {\n  books: [],\n  selectedBook: null,\n  loading: false,\n  error: null,\n};\n\nconst booksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_BOOKS_START:\n    case FETCH_BOOK_START:\n    case CREATE_BOOK_START:\n    case UPDATE_BOOK_START:\n    case DELETE_BOOK_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case FETCH_BOOKS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        books: action.payload,\n        error: null,\n      };\n\n    case FETCH_BOOK_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        selectedBook: action.payload,\n        error: null,\n      };\n\n    case CREATE_BOOK_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        books: {\n          ...state.books,\n          content: [action.payload, ...(state.books.content || [])],\n          totalElements: (state.books.totalElements || 0) + 1,\n        },\n        error: null,\n      };\n\n    case UPDATE_BOOK_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        books: {\n          ...state.books,\n          content: (state.books.content || []).map(book =>\n            book.id === action.payload.id ? action.payload : book\n          ),\n        },\n        selectedBook: action.payload,\n        error: null,\n      };\n\n    case DELETE_BOOK_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        books: {\n          ...state.books,\n          content: (state.books.content || []).filter(book => book.id !== action.payload),\n          totalElements: Math.max((state.books.totalElements || 0) - 1, 0),\n        },\n        error: null,\n      };\n\n    case FETCH_BOOKS_FAILURE:\n    case FETCH_BOOK_FAILURE:\n    case CREATE_BOOK_FAILURE:\n    case UPDATE_BOOK_FAILURE:\n    case DELETE_BOOK_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default booksReducer;","import {\n  FETCH_INVENTORY_START,\n  FETCH_INVENTORY_SUCCESS,\n  FETCH_INVENTORY_FAILURE,\n  FETCH_INVENTORY_ALERTS_START,\n  FETCH_INVENTORY_ALERTS_SUCCESS,\n  FETCH_INVENTORY_ALERTS_FAILURE,\n  RECEIVE_STOCK_START,\n  RECEIVE_STOCK_SUCCESS,\n  RECEIVE_STOCK_FAILURE,\n  SELL_STOCK_START,\n  SELL_STOCK_SUCCESS,\n  SELL_STOCK_FAILURE,\n} from '../actions/inventoryActions';\n\nconst initialState = {\n  items: [],\n  alerts: [],\n  loading: false,\n  error: null,\n};\n\nconst inventoryReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FETCH_INVENTORY_START:\n    case FETCH_INVENTORY_ALERTS_START:\n    case RECEIVE_STOCK_START:\n    case SELL_STOCK_START:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n\n    case FETCH_INVENTORY_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        items: action.payload,\n        error: null,\n      };\n\n    case FETCH_INVENTORY_ALERTS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        alerts: action.payload,\n        error: null,\n      };\n\n    case RECEIVE_STOCK_SUCCESS:\n    case SELL_STOCK_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        items: state.items.map(item =>\n          item.bookId === action.payload.bookId ? action.payload : item\n        ),\n        error: null,\n      };\n\n    case FETCH_INVENTORY_FAILURE:\n    case FETCH_INVENTORY_ALERTS_FAILURE:\n    case RECEIVE_STOCK_FAILURE:\n    case SELL_STOCK_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default inventoryReducer;","import {\n  ORDERS_LOADING,\n  ORDERS_SUCCESS,\n  ORDERS_ERROR,\n  ORDER_DETAIL_LOADING,\n  ORDER_DETAIL_SUCCESS,\n  ORDER_DETAIL_ERROR,\n  ORDER_CREATE_LOADING,\n  ORDER_CREATE_SUCCESS,\n  ORDER_CREATE_ERROR,\n  ORDER_UPDATE_LOADING,\n  ORDER_UPDATE_SUCCESS,\n  ORDER_UPDATE_ERROR,\n  ORDER_STATUS_COUNTS_LOADING,\n  ORDER_STATUS_COUNTS_SUCCESS,\n  ORDER_STATUS_COUNTS_ERROR,\n} from '../actions/ordersActions';\n\nconst initialState = {\n  orders: {\n    content: [],\n    totalElements: 0,\n    totalPages: 0,\n    number: 0,\n    size: 10,\n  },\n  selectedOrder: null,\n  statusCounts: {\n    pending: 0,\n    confirmed: 0,\n    picking: 0,\n    shipped: 0,\n    delivered: 0,\n    cancelled: 0,\n  },\n  loading: false,\n  detailLoading: false,\n  createLoading: false,\n  updateLoading: false,\n  statusCountsLoading: false,\n  error: null,\n  detailError: null,\n  createError: null,\n  updateError: null,\n  statusCountsError: null,\n};\n\nconst ordersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ORDERS_LOADING:\n      return {\n        ...state,\n        loading: true,\n        error: null,\n      };\n    case ORDERS_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        orders: action.payload,\n        error: null,\n      };\n    case ORDERS_ERROR:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    \n    case ORDER_DETAIL_LOADING:\n      return {\n        ...state,\n        detailLoading: true,\n        detailError: null,\n      };\n    case ORDER_DETAIL_SUCCESS:\n      return {\n        ...state,\n        detailLoading: false,\n        selectedOrder: action.payload,\n        detailError: null,\n      };\n    case ORDER_DETAIL_ERROR:\n      return {\n        ...state,\n        detailLoading: false,\n        detailError: action.payload,\n      };\n    \n    case ORDER_CREATE_LOADING:\n      return {\n        ...state,\n        createLoading: true,\n        createError: null,\n      };\n    case ORDER_CREATE_SUCCESS:\n      return {\n        ...state,\n        createLoading: false,\n        createError: null,\n        // Optionally add the new order to the list\n        orders: {\n          ...state.orders,\n          content: [action.payload, ...state.orders.content],\n          totalElements: state.orders.totalElements + 1,\n        },\n      };\n    case ORDER_CREATE_ERROR:\n      return {\n        ...state,\n        createLoading: false,\n        createError: action.payload,\n      };\n    \n    case ORDER_UPDATE_LOADING:\n      return {\n        ...state,\n        updateLoading: true,\n        updateError: null,\n      };\n    case ORDER_UPDATE_SUCCESS:\n      return {\n        ...state,\n        updateLoading: false,\n        updateError: null,\n        selectedOrder: action.payload,\n        // Update the order in the list\n        orders: {\n          ...state.orders,\n          content: state.orders.content.map(order =>\n            order.id === action.payload.id ? action.payload : order\n          ),\n        },\n      };\n    case ORDER_UPDATE_ERROR:\n      return {\n        ...state,\n        updateLoading: false,\n        updateError: action.payload,\n      };\n    \n    case ORDER_STATUS_COUNTS_LOADING:\n      return {\n        ...state,\n        statusCountsLoading: true,\n        statusCountsError: null,\n      };\n    case ORDER_STATUS_COUNTS_SUCCESS:\n      return {\n        ...state,\n        statusCountsLoading: false,\n        statusCounts: action.payload,\n        statusCountsError: null,\n      };\n    case ORDER_STATUS_COUNTS_ERROR:\n      return {\n        ...state,\n        statusCountsLoading: false,\n        statusCountsError: action.payload,\n      };\n    \n    default:\n      return state;\n  }\n};\n\nexport default ordersReducer;","import { combineReducers } from 'redux';\nimport booksReducer from './booksReducer';\nimport inventoryReducer from './inventoryReducer';\nimport ordersReducer from './ordersReducer';\n\nconst rootReducer = combineReducers({\n  books: booksReducer,\n  inventory: inventoryReducer,\n  orders: ordersReducer,\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\n// Enable Redux DevTools in development\nconst composeEnhancers = \n  (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;","import { createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#1976d2',\n    },\n    secondary: {\n      main: '#dc004e',\n    },\n  },\n  typography: {\n    h6: {\n      fontWeight: 600,\n    },\n  },\n});\n\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport App from './App';\nimport store from './store/index';\nimport theme from './theme';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}